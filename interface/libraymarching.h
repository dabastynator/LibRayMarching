/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.5.0.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of Ray Marching Library

Interface version: 0.9.0

*/

#ifndef __LIBRAYMARCHING_HEADER
#define __LIBRAYMARCHING_HEADER

#ifdef __LIBRAYMARCHING_EXPORTS
#ifdef _WIN32
#define LIBRAYMARCHING_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBRAYMARCHING_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBRAYMARCHING_EXPORTS
#define LIBRAYMARCHING_DECLSPEC
#endif // __LIBRAYMARCHING_EXPORTS

#include "libraymarching_types.h"

extern "C" {

/*************************************************************************************************************************
 Class definition for BaseClass
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Primitive
**************************************************************************************************************************/

/**
* Reset the position matrix to identity
*
* @param[in] pPrimitive - Primitive instance.
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_identityposition(LibRayMarching_Primitive pPrimitive);

/**
* Translate the primitive matrix by given movement vector
*
* @param[in] pPrimitive - Primitive instance.
* @param[in] pTranslation - Movement vector
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_translate(LibRayMarching_Primitive pPrimitive, const sLibRayMarchingVector * pTranslation);

/**
* Rotate the primitive matrix by given axis and angle
*
* @param[in] pPrimitive - Primitive instance.
* @param[in] pAxis - Rotation axis
* @param[in] dRadian - Rotation angle in radian
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_rotate(LibRayMarching_Primitive pPrimitive, const sLibRayMarchingVector * pAxis, LibRayMarching_double dRadian);

/**
* Scale the primitive matrix by given vector
*
* @param[in] pPrimitive - Primitive instance.
* @param[in] pScale - Scale vector for each component
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_scale(LibRayMarching_Primitive pPrimitive, const sLibRayMarchingVector * pScale);

/**
* Set material for this primitive
*
* @param[in] pPrimitive - Primitive instance.
* @param[in] pMaterial - Material for this primitive
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_setmaterial(LibRayMarching_Primitive pPrimitive, const sLibRayMarchingMaterial * pMaterial);

/*************************************************************************************************************************
 Class definition for Sphere
**************************************************************************************************************************/

/**
* Get the current radius
*
* @param[in] pSphere - Sphere instance.
* @param[out] pRadius - The radius
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_sphere_getradius(LibRayMarching_Sphere pSphere, LibRayMarching_double * pRadius);

/**
* Set the current radius
*
* @param[in] pSphere - Sphere instance.
* @param[in] dRadius - The raidus
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_sphere_setradius(LibRayMarching_Sphere pSphere, LibRayMarching_double dRadius);

/*************************************************************************************************************************
 Class definition for Capsule
**************************************************************************************************************************/

/**
* Get the current radius
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pRadius - The radius
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getradius(LibRayMarching_Capsule pCapsule, LibRayMarching_double * pRadius);

/**
* Set the current radius
*
* @param[in] pCapsule - Capsule instance.
* @param[in] dRadius - The raidus
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setradius(LibRayMarching_Capsule pCapsule, LibRayMarching_double dRadius);

/**
* Get the current point 1
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pPoint1 - Point 1
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getpoint1(LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint1);

/**
* Set the current point 1
*
* @param[in] pCapsule - Capsule instance.
* @param[in] pPoint1 - Point 1
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setpoint1(LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint1);

/**
* Get the current point 2
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pPoint2 - Point 2
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getpoint2(LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint2);

/**
* Set the current point 2
*
* @param[in] pCapsule - Capsule instance.
* @param[in] pPoint2 - Point 2
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setpoint2(LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint2);

/*************************************************************************************************************************
 Class definition for Plane
**************************************************************************************************************************/

/**
* Get the current normal
*
* @param[in] pPlane - Plane instance.
* @param[out] pNormal - Normal
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_getnormal(LibRayMarching_Plane pPlane, sLibRayMarchingVector * pNormal);

/**
* Set the current normal
*
* @param[in] pPlane - Plane instance.
* @param[in] pNormal - Normal
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_setnormal(LibRayMarching_Plane pPlane, const sLibRayMarchingVector * pNormal);

/*************************************************************************************************************************
 Class definition for Box
**************************************************************************************************************************/

/**
* Get the size in x, y and z dimension
*
* @param[in] pBox - Box instance.
* @param[out] pDimensions - Size in x, y and z dimension
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_box_getdimensions(LibRayMarching_Box pBox, sLibRayMarchingVector * pDimensions);

/**
* Set the size in x, y and z dimension
*
* @param[in] pBox - Box instance.
* @param[in] pDimensions - Size in x, y and z dimension
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_box_setdimensions(LibRayMarching_Box pBox, const sLibRayMarchingVector * pDimensions);

/*************************************************************************************************************************
 Class definition for PrimitiveGroup
**************************************************************************************************************************/

/**
* Get number of primitives
*
* @param[in] pPrimitiveGroup - PrimitiveGroup instance.
* @param[out] pCount - Number of primitives
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitivegroup_getprimitivecount(LibRayMarching_PrimitiveGroup pPrimitiveGroup, LibRayMarching_uint32 * pCount);

/**
* Get primitive at given index
*
* @param[in] pPrimitiveGroup - PrimitiveGroup instance.
* @param[in] nIndex - Index
* @param[out] pPrimitive - Primitive at given index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitivegroup_getprimitive(LibRayMarching_PrimitiveGroup pPrimitiveGroup, LibRayMarching_uint32 nIndex, LibRayMarching_Primitive * pPrimitive);

/**
* Add primitive for this group
*
* @param[in] pPrimitiveGroup - PrimitiveGroup instance.
* @param[in] pPrimitive - Primitive for this group
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitivegroup_addprimitive(LibRayMarching_PrimitiveGroup pPrimitiveGroup, LibRayMarching_Primitive pPrimitive);

/**
* Remove primitive at given index
*
* @param[in] pPrimitiveGroup - PrimitiveGroup instance.
* @param[in] nIndex - Index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitivegroup_removeprimitive(LibRayMarching_PrimitiveGroup pPrimitiveGroup, LibRayMarching_uint32 nIndex);

/*************************************************************************************************************************
 Class definition for RayMarching
**************************************************************************************************************************/

/**
* Get number of lights
*
* @param[in] pRayMarching - RayMarching instance.
* @param[out] pCount - Number of lights
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getlightcount(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 * pCount);

/**
* Get light at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @param[out] pPosition - Position of the light
* @param[out] pColor - Color of the light
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getlight(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex, sLibRayMarchingVector * pPosition, sLibRayMarchingVector * pColor);

/**
* Add new light
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pPosition - Position of the light
* @param[in] pColor - Color of the light
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_addlight(LibRayMarching_RayMarching pRayMarching, const sLibRayMarchingVector * pPosition, const sLibRayMarchingVector * pColor);

/**
* Delete light at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_deletelight(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex);

/**
* Get number of primitives
*
* @param[in] pRayMarching - RayMarching instance.
* @param[out] pCount - Number of primitives
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getprimitivecount(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 * pCount);

/**
* Get primitive at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @param[out] pPrimitive - Primitive at given index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getprimitive(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex, LibRayMarching_Primitive * pPrimitive);

/**
* Add primitive
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pPrimitive - Primitive
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_addprimitive(LibRayMarching_RayMarching pRayMarching, LibRayMarching_Primitive pPrimitive);

/**
* Remove primitive at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_removeprimitive(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex);

/**
* Set the screen size
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nWidth - Width of the screen
* @param[in] nHeight - Height of the screen
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_setscreensize(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nWidth, LibRayMarching_uint32 nHeight);

/**
* Set viewport by given view vectors and FOV
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pEye - Position of the eye
* @param[in] pDir - Direction of the view
* @param[in] pUp - Direction of up vector
* @param[in] dFOV - Field of view angle in radian
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_setviewport(LibRayMarching_RayMarching pRayMarching, const sLibRayMarchingVector * pEye, const sLibRayMarchingVector * pDir, const sLibRayMarchingVector * pUp, LibRayMarching_double dFOV);

/**
* Renders the current scene
*
* @param[in] pRayMarching - RayMarching instance.
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_renderscene(LibRayMarching_RayMarching pRayMarching);

/**
* Return the color buffer
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nColorBufferBufferSize - Number of elements in buffer
* @param[out] pColorBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pColorBufferBuffer - uint64 buffer of Field of colors. One integer represents color as RGBA value of the pixel
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getcolorbuffer(LibRayMarching_RayMarching pRayMarching, const LibRayMarching_uint64 nColorBufferBufferSize, LibRayMarching_uint64* pColorBufferNeededCount, LibRayMarching_uint64 * pColorBufferBuffer);

/**
* Renders one single pixel
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] dX - X position of the pixel
* @param[in] dY - Y position of the pixel
* @param[out] pColor - RGBA value of the pixel
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_renderpixel(LibRayMarching_RayMarching pRayMarching, LibRayMarching_double dX, LibRayMarching_double dY, LibRayMarching_uint32 * pColor);

/**
* Sets the progress callback function
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pProgressCallback - The progress callback
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_setprogresscallback(LibRayMarching_RayMarching pRayMarching, LibRayMarchingProgressCallback pProgressCallback);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_getlasterror(LibRayMarching_BaseClass pInstance, const LibRayMarching_uint32 nErrorMessageBufferSize, LibRayMarching_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases the memory of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_releaseinstance(LibRayMarching_BaseClass pInstance);

/**
* retrieves the current version of the library.
*
* @param[out] pMajor - returns the major version of the library
* @param[out] pMinor - returns the minor version of the library
* @param[out] pMicro - returns the micro version of the library
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_getlibraryversion(LibRayMarching_uint32 * pMajor, LibRayMarching_uint32 * pMinor, LibRayMarching_uint32 * pMicro);

/**
* Creates a new ray marching instance
*
* @param[out] pInstance - New raymarching instance
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createraymarching(LibRayMarching_RayMarching * pInstance);

/**
* Create new sphere
*
* @param[in] dRadius - Radius of the sphere
* @param[out] pSphere - New sphere
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createsphere(LibRayMarching_double dRadius, LibRayMarching_Sphere * pSphere);

/**
* Create new capsule
*
* @param[in] dRadius - Radius of the capsule
* @param[in] pPoint1 - Point 1
* @param[in] pPoint2 - Point 2
* @param[out] pCapsule - New capsule
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createcapsule(LibRayMarching_double dRadius, const sLibRayMarchingVector * pPoint1, const sLibRayMarchingVector * pPoint2, LibRayMarching_Capsule * pCapsule);

/**
* Create new sphere
*
* @param[in] pDimensions - Dimensions of the box
* @param[out] pBox - New box
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createbox(const sLibRayMarchingVector * pDimensions, LibRayMarching_Box * pBox);

/**
* Create new plane
*
* @param[in] pOrigin - Origin of the plane
* @param[in] pNormal - Normal of the plane
* @param[out] pPlane - New plane
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createplane(const sLibRayMarchingVector * pOrigin, const sLibRayMarchingVector * pNormal, LibRayMarching_Plane * pPlane);

}

#endif // __LIBRAYMARCHING_HEADER


/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Ray Marching Library. The implementer of Ray Marching Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.1.0

*/


#ifndef __LIBRAYMARCHING_CPPINTERFACES
#define __LIBRAYMARCHING_CPPINTERFACES

#include <string>
#include <memory>

#include "libraymarching_types.hpp"



namespace LibRayMarching {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBaseClass;
class IPrimitive;
class ISphere;
class ICapsule;
class IPlane;
class IBox;
class ITorus;
class ICylinder;
class IQuaternionFractal;
class IMengerSponge;
class IPrimitiveGroup;
class IRayMarching;



/*************************************************************************************************************************
 Class interface for BaseClass 
**************************************************************************************************************************/

class IBaseClass {
public:
	/**
	* IBaseClass::~IBaseClass - virtual destructor of IBaseClass
	*/
	virtual ~IBaseClass() {};

	/**
	* IBaseClass::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBaseClass* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBaseClass::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBaseClass* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBaseClass::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBaseClass::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBaseClass::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBaseClass::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBaseClass::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;
};


/**
 Definition of a shared pointer class for IBaseClass
*/
template<class T>
class IBaseClassSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseClassSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBaseClass::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBaseClass::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseClassSharedPtr<IBaseClass> PIBaseClass;


/*************************************************************************************************************************
 Class interface for Primitive 
**************************************************************************************************************************/

class IPrimitive : public virtual IBaseClass {
public:
	/**
	* IPrimitive::IdentityPosition - Reset the position matrix to identity
	*/
	virtual void IdentityPosition() = 0;

	/**
	* IPrimitive::Translate - Translate the primitive matrix by given movement vector
	* @param[in] Translation - Movement vector
	*/
	virtual void Translate(const LibRayMarching::sVector Translation) = 0;

	/**
	* IPrimitive::Rotate - Rotate the primitive matrix by given axis and angle
	* @param[in] Axis - Rotation axis
	* @param[in] dRadian - Rotation angle in radian
	*/
	virtual void Rotate(const LibRayMarching::sVector Axis, const LibRayMarching_double dRadian) = 0;

	/**
	* IPrimitive::Scale - Scale the primitive matrix by given vector
	* @param[in] Scale - Scale vector for each component
	*/
	virtual void Scale(const LibRayMarching::sVector Scale) = 0;

	/**
	* IPrimitive::SetMaterial - Set material for this primitive
	* @param[in] Material - Material for this primitive
	*/
	virtual void SetMaterial(const LibRayMarching::sMaterial Material) = 0;

	/**
	* IPrimitive::SetSinusDistortion - Set distortion by sinus addition of signed distance
	* @param[in] dDistortionFactor - Maximal distortion value
	* @param[in] dInterval - Size of distortion repeating interval
	*/
	virtual void SetSinusDistortion(const LibRayMarching_double dDistortionFactor, const LibRayMarching_double dInterval) = 0;

};

typedef IBaseClassSharedPtr<IPrimitive> PIPrimitive;


/*************************************************************************************************************************
 Class interface for Sphere 
**************************************************************************************************************************/

class ISphere : public virtual IPrimitive {
public:
	/**
	* ISphere::GetRadius - Get the current radius
	* @return The radius
	*/
	virtual LibRayMarching_double GetRadius() = 0;

	/**
	* ISphere::SetRadius - Set the current radius
	* @param[in] dRadius - The raidus
	*/
	virtual void SetRadius(const LibRayMarching_double dRadius) = 0;

};

typedef IBaseClassSharedPtr<ISphere> PISphere;


/*************************************************************************************************************************
 Class interface for Capsule 
**************************************************************************************************************************/

class ICapsule : public virtual IPrimitive {
public:
	/**
	* ICapsule::GetRadius - Get the current radius
	* @return The radius
	*/
	virtual LibRayMarching_double GetRadius() = 0;

	/**
	* ICapsule::SetRadius - Set the current radius
	* @param[in] dRadius - The raidus
	*/
	virtual void SetRadius(const LibRayMarching_double dRadius) = 0;

	/**
	* ICapsule::GetPoint1 - Get the current point 1
	* @return Point 1
	*/
	virtual LibRayMarching::sVector GetPoint1() = 0;

	/**
	* ICapsule::SetPoint1 - Set the current point 1
	* @param[in] Point1 - Point 1
	*/
	virtual void SetPoint1(const LibRayMarching::sVector Point1) = 0;

	/**
	* ICapsule::GetPoint2 - Get the current point 2
	* @return Point 2
	*/
	virtual LibRayMarching::sVector GetPoint2() = 0;

	/**
	* ICapsule::SetPoint2 - Set the current point 2
	* @param[in] Point2 - Point 2
	*/
	virtual void SetPoint2(const LibRayMarching::sVector Point2) = 0;

};

typedef IBaseClassSharedPtr<ICapsule> PICapsule;


/*************************************************************************************************************************
 Class interface for Plane 
**************************************************************************************************************************/

class IPlane : public virtual IPrimitive {
public:
	/**
	* IPlane::GetNormal - Get the current normal
	* @return Normal
	*/
	virtual LibRayMarching::sVector GetNormal() = 0;

	/**
	* IPlane::SetNormal - Set the current normal
	* @param[in] Normal - Normal
	*/
	virtual void SetNormal(const LibRayMarching::sVector Normal) = 0;

};

typedef IBaseClassSharedPtr<IPlane> PIPlane;


/*************************************************************************************************************************
 Class interface for Box 
**************************************************************************************************************************/

class IBox : public virtual IPrimitive {
public:
	/**
	* IBox::GetDimensions - Get the size in x, y and z dimension
	* @return Size in x, y and z dimension
	*/
	virtual LibRayMarching::sVector GetDimensions() = 0;

	/**
	* IBox::SetDimensions - Set the size in x, y and z dimension
	* @param[in] Dimensions - Size in x, y and z dimension
	*/
	virtual void SetDimensions(const LibRayMarching::sVector Dimensions) = 0;

};

typedef IBaseClassSharedPtr<IBox> PIBox;


/*************************************************************************************************************************
 Class interface for Torus 
**************************************************************************************************************************/

class ITorus : public virtual IPrimitive {
public:
	/**
	* ITorus::GetBigRadius - Get the bigger outer radius
	* @return Bigger outer radius
	*/
	virtual LibRayMarching_double GetBigRadius() = 0;

	/**
	* ITorus::SetBigRadius - Set the bigger outer radius
	* @param[in] dBigRadius - Bigger outer radius
	*/
	virtual void SetBigRadius(const LibRayMarching_double dBigRadius) = 0;

	/**
	* ITorus::GetSmallRadius - Get the smaller outer radius
	* @return Smaller outer radius
	*/
	virtual LibRayMarching_double GetSmallRadius() = 0;

	/**
	* ITorus::SetSmallRadius - Set the smaller outer radius
	* @param[in] dSmallRadius - Smaller outer radius
	*/
	virtual void SetSmallRadius(const LibRayMarching_double dSmallRadius) = 0;

};

typedef IBaseClassSharedPtr<ITorus> PITorus;


/*************************************************************************************************************************
 Class interface for Cylinder 
**************************************************************************************************************************/

class ICylinder : public virtual IPrimitive {
public:
	/**
	* ICylinder::GetRadius - Get the radius
	* @return radius
	*/
	virtual LibRayMarching_double GetRadius() = 0;

	/**
	* ICylinder::SetRadius - Set the radius
	* @param[in] dRadius - radius
	*/
	virtual void SetRadius(const LibRayMarching_double dRadius) = 0;

	/**
	* ICylinder::GetHeight - Get the Height
	* @return Height
	*/
	virtual LibRayMarching_double GetHeight() = 0;

	/**
	* ICylinder::SetHeight - Set the Height
	* @param[in] dHeight - Height
	*/
	virtual void SetHeight(const LibRayMarching_double dHeight) = 0;

};

typedef IBaseClassSharedPtr<ICylinder> PICylinder;


/*************************************************************************************************************************
 Class interface for QuaternionFractal 
**************************************************************************************************************************/

class IQuaternionFractal : public virtual IPrimitive {
public:
	/**
	* IQuaternionFractal::GetQuaternion - Get the current quaternion parameter
	* @param[out] dR - quaternion r part
	* @param[out] dI - quaternion i part
	* @param[out] dJ - quaternion j part
	* @param[out] dK - quaternion k part
	*/
	virtual void GetQuaternion(LibRayMarching_double & dR, LibRayMarching_double & dI, LibRayMarching_double & dJ, LibRayMarching_double & dK) = 0;

	/**
	* IQuaternionFractal::SetQuaternion - Set the current quaternion parameter
	* @param[in] dR - quaternion r part
	* @param[in] dI - quaternion i part
	* @param[in] dJ - quaternion j part
	* @param[in] dK - quaternion k part
	*/
	virtual void SetQuaternion(const LibRayMarching_double dR, const LibRayMarching_double dI, const LibRayMarching_double dJ, const LibRayMarching_double dK) = 0;

	/**
	* IQuaternionFractal::GetIterations - Get the number of maximal iterations
	* @return iterations
	*/
	virtual LibRayMarching_uint32 GetIterations() = 0;

	/**
	* IQuaternionFractal::SetIterations - Set the number of maximal iterations
	* @param[in] nIterations - iterations
	*/
	virtual void SetIterations(const LibRayMarching_uint32 nIterations) = 0;

};

typedef IBaseClassSharedPtr<IQuaternionFractal> PIQuaternionFractal;


/*************************************************************************************************************************
 Class interface for MengerSponge 
**************************************************************************************************************************/

class IMengerSponge : public virtual IPrimitive {
public:
	/**
	* IMengerSponge::GetStepCount - Get the number of step count
	* @return StepCount
	*/
	virtual LibRayMarching_uint32 GetStepCount() = 0;

	/**
	* IMengerSponge::SetStepCount - Set the number of step count
	* @param[in] nStepCount - StepCount
	*/
	virtual void SetStepCount(const LibRayMarching_uint32 nStepCount) = 0;

};

typedef IBaseClassSharedPtr<IMengerSponge> PIMengerSponge;


/*************************************************************************************************************************
 Class interface for PrimitiveGroup 
**************************************************************************************************************************/

class IPrimitiveGroup : public virtual IPrimitive {
public:
	/**
	* IPrimitiveGroup::GetPrimitiveCount - Get number of primitives
	* @return Number of primitives
	*/
	virtual LibRayMarching_uint32 GetPrimitiveCount() = 0;

	/**
	* IPrimitiveGroup::GetPrimitive - Get primitive at given index
	* @param[in] nIndex - Index
	* @return Primitive at given index
	*/
	virtual IPrimitive * GetPrimitive(const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IPrimitiveGroup::AddPrimitive - Add primitive for this group
	* @param[in] pPrimitive - Primitive for this group
	*/
	virtual void AddPrimitive(IPrimitive* pPrimitive) = 0;

	/**
	* IPrimitiveGroup::RemovePrimitive - Remove primitive at given index
	* @param[in] nIndex - Index
	*/
	virtual void RemovePrimitive(const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IPrimitiveGroup::SetGroupAction - Set method to combine primitives
	* @param[in] eGroupAction - Method to combine primitives
	*/
	virtual void SetGroupAction(const LibRayMarching::eGroupAction eGroupAction) = 0;

	/**
	* IPrimitiveGroup::GetGroupAction - Get method to combine primitives
	* @return Method to combine primitives
	*/
	virtual LibRayMarching::eGroupAction GetGroupAction() = 0;

};

typedef IBaseClassSharedPtr<IPrimitiveGroup> PIPrimitiveGroup;


/*************************************************************************************************************************
 Class interface for RayMarching 
**************************************************************************************************************************/

class IRayMarching : public virtual IBaseClass {
public:
	/**
	* IRayMarching::GetLightCount - Get number of lights
	* @return Number of lights
	*/
	virtual LibRayMarching_uint32 GetLightCount() = 0;

	/**
	* IRayMarching::GetLight - Get light at given index
	* @param[in] nIndex - Index
	* @param[out] sPosition - Position of the light
	* @param[out] sColor - Color of the light
	*/
	virtual void GetLight(const LibRayMarching_uint32 nIndex, LibRayMarching::sVector & sPosition, LibRayMarching::sVector & sColor) = 0;

	/**
	* IRayMarching::AddLight - Add new light
	* @param[in] Position - Position of the light
	* @param[in] Color - Color of the light
	*/
	virtual void AddLight(const LibRayMarching::sVector Position, const LibRayMarching::sVector Color) = 0;

	/**
	* IRayMarching::DeleteLight - Delete light at given index
	* @param[in] nIndex - Index
	*/
	virtual void DeleteLight(const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IRayMarching::GetPrimitiveCount - Get number of primitives
	* @return Number of primitives
	*/
	virtual LibRayMarching_uint32 GetPrimitiveCount() = 0;

	/**
	* IRayMarching::GetPrimitive - Get primitive at given index
	* @param[in] nIndex - Index
	* @return Primitive at given index
	*/
	virtual IPrimitive * GetPrimitive(const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IRayMarching::AddPrimitive - Add primitive
	* @param[in] pPrimitive - Primitive
	*/
	virtual void AddPrimitive(IPrimitive* pPrimitive) = 0;

	/**
	* IRayMarching::RemovePrimitive - Remove primitive at given index
	* @param[in] nIndex - Index
	*/
	virtual void RemovePrimitive(const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IRayMarching::SetScreenSize - Set the screen size
	* @param[in] nWidth - Width of the screen
	* @param[in] nHeight - Height of the screen
	*/
	virtual void SetScreenSize(const LibRayMarching_uint32 nWidth, const LibRayMarching_uint32 nHeight) = 0;

	/**
	* IRayMarching::SetViewport - Set viewport by given view vectors and FOV
	* @param[in] Eye - Position of the eye
	* @param[in] Dir - Direction of the view
	* @param[in] Up - Direction of up vector
	* @param[in] dFOV - Field of view angle in radian
	*/
	virtual void SetViewport(const LibRayMarching::sVector Eye, const LibRayMarching::sVector Dir, const LibRayMarching::sVector Up, const LibRayMarching_double dFOV) = 0;

	/**
	* IRayMarching::SetBackground - Set special properties
	* @param[in] Background - Background color
	* @param[in] dDistanceStart - Distance where the background shading starts
	* @param[in] dDistanceEnd - Distance where the background shading ends
	*/
	virtual void SetBackground(const LibRayMarching::sVector Background, const LibRayMarching_double dDistanceStart, const LibRayMarching_double dDistanceEnd) = 0;

	/**
	* IRayMarching::SetShaderProperties - Set shader properties
	* @param[in] ShaderProperties - Shader properties
	*/
	virtual void SetShaderProperties(const LibRayMarching::sShaderProperties ShaderProperties) = 0;

	/**
	* IRayMarching::RenderScene - Renders the current scene
	*/
	virtual void RenderScene() = 0;

	/**
	* IRayMarching::GetColorBuffer - Return the color buffer
	* @param[in] nColorBufferBufferSize - Number of elements in buffer
	* @param[out] pColorBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pColorBufferBuffer - uint64 buffer of Field of colors. One integer represents color as RGBA value of the pixel
	*/
	virtual void GetColorBuffer(LibRayMarching_uint64 nColorBufferBufferSize, LibRayMarching_uint64* pColorBufferNeededCount, LibRayMarching_uint64 * pColorBufferBuffer) = 0;

	/**
	* IRayMarching::RenderPixel - Renders one single pixel
	* @param[in] dX - X position of the pixel
	* @param[in] dY - Y position of the pixel
	* @return RGBA value of the pixel
	*/
	virtual LibRayMarching_uint32 RenderPixel(const LibRayMarching_double dX, const LibRayMarching_double dY) = 0;

	/**
	* IRayMarching::SetProgressCallback - Sets the progress callback function
	* @param[in] pProgressCallback - callback function
	*/
	virtual void SetProgressCallback(const LibRayMarching::ProgressCallback pProgressCallback) = 0;

};

typedef IBaseClassSharedPtr<IRayMarching> PIRayMarching;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibraymarching::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBaseClass* pInstance, std::string & sErrorMessage);

	/**
	* Ilibraymarching::GetLibraryVersion - retrieves the current version of the library.
	* @param[out] nMajor - returns the major version of the library
	* @param[out] nMinor - returns the minor version of the library
	* @param[out] nMicro - returns the micro version of the library
	*/
	static void GetLibraryVersion(LibRayMarching_uint32 & nMajor, LibRayMarching_uint32 & nMinor, LibRayMarching_uint32 & nMicro);

	/**
	* Ilibraymarching::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBaseClass* pInstance);

	/**
	* Ilibraymarching::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBaseClass* pInstance);

	/**
	* Ilibraymarching::CreateRayMarching - Creates a new ray marching instance
	* @return New raymarching instance
	*/
	static IRayMarching * CreateRayMarching();

	/**
	* Ilibraymarching::CreateSphere - Create new sphere
	* @param[in] dRadius - Radius of the sphere
	* @return New sphere
	*/
	static ISphere * CreateSphere(const LibRayMarching_double dRadius);

	/**
	* Ilibraymarching::CreateCapsule - Create new capsule
	* @param[in] dRadius - Radius of the capsule
	* @param[in] Point1 - Point 1
	* @param[in] Point2 - Point 2
	* @return New capsule
	*/
	static ICapsule * CreateCapsule(const LibRayMarching_double dRadius, const LibRayMarching::sVector Point1, const LibRayMarching::sVector Point2);

	/**
	* Ilibraymarching::CreateBox - Create new sphere
	* @param[in] Dimensions - Dimensions of the box
	* @return New box
	*/
	static IBox * CreateBox(const LibRayMarching::sVector Dimensions);

	/**
	* Ilibraymarching::CreatePlane - Create new plane
	* @param[in] Origin - Origin of the plane
	* @param[in] Normal - Normal of the plane
	* @return New plane
	*/
	static IPlane * CreatePlane(const LibRayMarching::sVector Origin, const LibRayMarching::sVector Normal);

	/**
	* Ilibraymarching::CreateCylinder - Create new cylinder
	* @param[in] dRadius - Radius of the cylinder
	* @param[in] dHeight - Height of the cylinder
	* @return New cylinder
	*/
	static ICylinder * CreateCylinder(const LibRayMarching_double dRadius, const LibRayMarching_double dHeight);

	/**
	* Ilibraymarching::CreateTorus - Create new Torus
	* @param[in] dBigRadius - Big Radius of the Torus
	* @param[in] dSmallRadius - Small Radius of the Torus
	* @return New Torus
	*/
	static ITorus * CreateTorus(const LibRayMarching_double dBigRadius, const LibRayMarching_double dSmallRadius);

	/**
	* Ilibraymarching::CreateMengerSponge - Create new MengerSponge
	* @param[in] nStepCount - StepCount
	* @return New MengerSponge
	*/
	static IMengerSponge * CreateMengerSponge(const LibRayMarching_uint32 nStepCount);

	/**
	* Ilibraymarching::CreateQuaternionFractal - Create new QuaternionFractal
	* @param[in] nIterations - Iterations
	* @return New QuaternionFractal
	*/
	static IQuaternionFractal * CreateQuaternionFractal(const LibRayMarching_uint32 nIterations);

	/**
	* Ilibraymarching::CreatePrimitiveGroup - Create new PrimitiveGroup
	* @param[in] eGroupAction - Method to combine primitives
	* @return New PrimitiveGroup
	*/
	static IPrimitiveGroup * CreatePrimitiveGroup(const LibRayMarching::eGroupAction eGroupAction);

};

} // namespace Impl
} // namespace LibRayMarching

#endif // __LIBRAYMARCHING_CPPINTERFACES

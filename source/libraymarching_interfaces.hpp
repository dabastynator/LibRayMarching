/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.4.0.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Ray Marching Library. The implementer of Ray Marching Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 0.9.0

*/


#ifndef __LIBRAYMARCHING_CPPINTERFACES
#define __LIBRAYMARCHING_CPPINTERFACES

#include <string>

#include "libraymarching_types.h"

namespace LibRayMarching {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class ILibRayMarchingMaterial;
class ILibRayMarchingMatrix;
class ILibRayMarchingPrimitive;
class ILibRayMarchingSphere;
class ILibRayMarchingCapsule;
class ILibRayMarchingPlane;
class ILibRayMarchingBox;
class ILibRayMarchingLight;
class ILibRayMarchingScene;
class ILibRayMarchingCamera;
class ILibRayMarchingRayMarching;


/*************************************************************************************************************************
 Class ILibRayMarchingBaseClass 
**************************************************************************************************************************/

class ILibRayMarchingBaseClass {
public:
	virtual ~ILibRayMarchingBaseClass () {}
};


/*************************************************************************************************************************
 Class interface for LibRayMarchingMaterial 
**************************************************************************************************************************/

class ILibRayMarchingMaterial : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* IMaterial::GetColor - Returns the current color
	* @return The current color of this Material
	*/
	virtual sLibRayMarchingVector GetColor () = 0;

	/**
	* IMaterial::SetColor - Set the current color
	* @param[in] Color - The color of this Material
	*/
	virtual void SetColor (const sLibRayMarchingVector Color) = 0;

	/**
	* IMaterial::GetAmbient - Get the ambient factor
	* @return The ambient factor of this Material
	*/
	virtual LibRayMarching_double GetAmbient () = 0;

	/**
	* IMaterial::SetAmbient - Set the ambient factor
	* @param[in] dAmbient - The ambient factor of this Material
	*/
	virtual void SetAmbient (const LibRayMarching_double dAmbient) = 0;

	/**
	* IMaterial::GetDiffuse - Get the diffuse factor
	* @return The diffuse factor of this Material
	*/
	virtual LibRayMarching_double GetDiffuse () = 0;

	/**
	* IMaterial::SetDiffuse - Set the diffuse factor
	* @param[in] dDiffuse - The diffuse factor of this Material
	*/
	virtual void SetDiffuse (const LibRayMarching_double dDiffuse) = 0;

	/**
	* IMaterial::GetSpecular - Get the specular factor
	* @return The specular factor of this Material
	*/
	virtual LibRayMarching_double GetSpecular () = 0;

	/**
	* IMaterial::SetSpecular - Set the specular factor
	* @param[in] dSpecular - The specular factor of this Material
	*/
	virtual void SetSpecular (const LibRayMarching_double dSpecular) = 0;

	/**
	* IMaterial::GetSpecularAlpha - Get the specular alpha factor
	* @return The specular alpha factor of this Material
	*/
	virtual LibRayMarching_double GetSpecularAlpha () = 0;

	/**
	* IMaterial::SetSpecularAlpha - Set the specular alpha factor
	* @param[in] dSpecularAlpha - The specular alpha factor of this Material
	*/
	virtual void SetSpecularAlpha (const LibRayMarching_double dSpecularAlpha) = 0;

	/**
	* IMaterial::GetReflection - Get the reflection factor
	* @return The reflection factor of this Material
	*/
	virtual LibRayMarching_double GetReflection () = 0;

	/**
	* IMaterial::SetReflection - Set the specular alpha factor
	* @param[in] dReflection - The reflection factor of this Material
	*/
	virtual void SetReflection (const LibRayMarching_double dReflection) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingMatrix 
**************************************************************************************************************************/

class ILibRayMarchingMatrix : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* IMatrix::Identity - Reset this matrix to identity
	*/
	virtual void Identity () = 0;

	/**
	* IMatrix::Translate - Translate this matrix by given movement vector
	* @param[in] Translation - Movement vector
	*/
	virtual void Translate (const sLibRayMarchingVector Translation) = 0;

	/**
	* IMatrix::Rotate - Rotate this matrix by given axis and angle
	* @param[in] Axis - Rotation axis
	* @param[in] dRadian - Rotation angle in radian
	*/
	virtual void Rotate (const sLibRayMarchingVector Axis, const LibRayMarching_double dRadian) = 0;

	/**
	* IMatrix::Scale - Scale this matrix by given vector
	* @param[in] Scale - Scale vector for each component
	*/
	virtual void Scale (const sLibRayMarchingVector Scale) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingPrimitive 
**************************************************************************************************************************/

class ILibRayMarchingPrimitive : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* IPrimitive::GetMatrix - Returns the matrix of this primitive
	* @return Matrix of this primitive
	*/
	virtual ILibRayMarchingMatrix * GetMatrix () = 0;

	/**
	* IPrimitive::GetMaterial - Returns the material of this primitive
	* @return Material of this primitive
	*/
	virtual ILibRayMarchingMaterial * GetMaterial () = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingSphere 
**************************************************************************************************************************/

class ILibRayMarchingSphere : public virtual ILibRayMarchingBaseClass, public virtual ILibRayMarchingPrimitive {
public:
	/**
	* ISphere::GetRadius - Get the current radius
	* @return The radius
	*/
	virtual LibRayMarching_double GetRadius () = 0;

	/**
	* ISphere::SetRadius - Set the current radius
	* @param[in] dRadius - The raidus
	*/
	virtual void SetRadius (const LibRayMarching_double dRadius) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingCapsule 
**************************************************************************************************************************/

class ILibRayMarchingCapsule : public virtual ILibRayMarchingBaseClass, public virtual ILibRayMarchingPrimitive {
public:
	/**
	* ICapsule::GetRadius - Get the current radius
	* @return The radius
	*/
	virtual LibRayMarching_double GetRadius () = 0;

	/**
	* ICapsule::SetRadius - Set the current radius
	* @param[in] dRadius - The raidus
	*/
	virtual void SetRadius (const LibRayMarching_double dRadius) = 0;

	/**
	* ICapsule::GetPoint1 - Get the current point 1
	* @return Point 1
	*/
	virtual sLibRayMarchingVector GetPoint1 () = 0;

	/**
	* ICapsule::SetPoint1 - Set the current point 1
	* @param[in] Point1 - Point 1
	*/
	virtual void SetPoint1 (const sLibRayMarchingVector Point1) = 0;

	/**
	* ICapsule::GetPoint2 - Get the current point 2
	* @return Point 2
	*/
	virtual sLibRayMarchingVector GetPoint2 () = 0;

	/**
	* ICapsule::SetPoint2 - Set the current point 2
	* @param[in] Point2 - Point 2
	*/
	virtual void SetPoint2 (const sLibRayMarchingVector Point2) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingPlane 
**************************************************************************************************************************/

class ILibRayMarchingPlane : public virtual ILibRayMarchingBaseClass, public virtual ILibRayMarchingPrimitive {
public:
	/**
	* IPlane::GetOrigin - Get the current origin
	* @return Origin
	*/
	virtual sLibRayMarchingVector GetOrigin () = 0;

	/**
	* IPlane::SetOrigin - Set the current origin
	* @param[in] Origin - Origin
	*/
	virtual void SetOrigin (const sLibRayMarchingVector Origin) = 0;

	/**
	* IPlane::GetNormal - Get the current normal
	* @return Normal
	*/
	virtual sLibRayMarchingVector GetNormal () = 0;

	/**
	* IPlane::SetNormal - Set the current normal
	* @param[in] Normal - Normal
	*/
	virtual void SetNormal (const sLibRayMarchingVector Normal) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingBox 
**************************************************************************************************************************/

class ILibRayMarchingBox : public virtual ILibRayMarchingBaseClass, public virtual ILibRayMarchingPrimitive {
public:
	/**
	* IBox::GetDimensions - Get the size in x, y and z dimension
	* @return Size in x, y and z dimension
	*/
	virtual sLibRayMarchingVector GetDimensions () = 0;

	/**
	* IBox::SetDimensions - Set the size in x, y and z dimension
	* @param[in] Dimensions - Size in x, y and z dimension
	*/
	virtual void SetDimensions (const sLibRayMarchingVector Dimensions) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingLight 
**************************************************************************************************************************/

class ILibRayMarchingLight : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* ILight::GetColor - Returns the current color of this light
	* @return The current color
	*/
	virtual sLibRayMarchingVector GetColor () = 0;

	/**
	* ILight::SetColor - Set the current color of this light
	* @param[in] Color - The color
	*/
	virtual void SetColor (const sLibRayMarchingVector Color) = 0;

	/**
	* ILight::GetPosition - Returns the current color of this light
	* @return The current position
	*/
	virtual sLibRayMarchingVector GetPosition () = 0;

	/**
	* ILight::SetPosition - Set the current color this light
	* @param[in] Position - The position
	*/
	virtual void SetPosition (const sLibRayMarchingVector Position) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingScene 
**************************************************************************************************************************/

class ILibRayMarchingScene : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* IScene::GetPrimitiveCount - Get number of primitives
	* @return Number of primitives
	*/
	virtual LibRayMarching_uint32 GetPrimitiveCount () = 0;

	/**
	* IScene::GetPrimitive - Get primitive at given index
	* @param[in] nIndex - Index
	* @return Primitive at given index
	*/
	virtual ILibRayMarchingPrimitive * GetPrimitive (const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IScene::DeletePrimitive - Delete primitive at given index
	* @param[in] nIndex - Index
	*/
	virtual void DeletePrimitive (const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IScene::AddSphere - Create new sphere
	* @param[in] dRadius - Radius of the sphere
	* @return New sphere
	*/
	virtual ILibRayMarchingSphere * AddSphere (const LibRayMarching_double dRadius) = 0;

	/**
	* IScene::AddCapsule - Create new capsule
	* @param[in] dRadius - Radius of the capsule
	* @param[in] Point1 - Point 1
	* @param[in] Point2 - Point 2
	* @return New capsule
	*/
	virtual ILibRayMarchingCapsule * AddCapsule (const LibRayMarching_double dRadius, const sLibRayMarchingVector Point1, const sLibRayMarchingVector Point2) = 0;

	/**
	* IScene::AddBox - Create new sphere
	* @param[in] Dimensions - Dimensions of the box
	* @return New box
	*/
	virtual ILibRayMarchingBox * AddBox (const sLibRayMarchingVector Dimensions) = 0;

	/**
	* IScene::AddPlane - Create new plane
	* @param[in] Origin - Origin of the plane
	* @param[in] Normal - Normal of the plane
	* @return New plane
	*/
	virtual ILibRayMarchingPlane * AddPlane (const sLibRayMarchingVector Origin, const sLibRayMarchingVector Normal) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingCamera 
**************************************************************************************************************************/

class ILibRayMarchingCamera : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* ICamera::SetScreenSize - Set the screen size
	* @param[in] nWidth - Width of the screen
	* @param[in] nHeight - Height of the screen
	*/
	virtual void SetScreenSize (const LibRayMarching_uint32 nWidth, const LibRayMarching_uint32 nHeight) = 0;

	/**
	* ICamera::SetViewport - Set viewport by given view vectors and FOV
	* @param[in] Eye - Position of the eye
	* @param[in] Dir - Direction of the view
	* @param[in] Up - Direction of up vector
	* @param[in] dFOV - Field of view angle in radian
	*/
	virtual void SetViewport (const sLibRayMarchingVector Eye, const sLibRayMarchingVector Dir, const sLibRayMarchingVector Up, const LibRayMarching_double dFOV) = 0;

};


/*************************************************************************************************************************
 Class interface for LibRayMarchingRayMarching 
**************************************************************************************************************************/

class ILibRayMarchingRayMarching : public virtual ILibRayMarchingBaseClass {
public:
	/**
	* IRayMarching::GetLightCount - Get number of lights
	* @return Number of lights
	*/
	virtual LibRayMarching_uint32 GetLightCount () = 0;

	/**
	* IRayMarching::GetLight - Get light at given index
	* @param[in] nIndex - Index
	* @return Light at given index
	*/
	virtual ILibRayMarchingLight * GetLight (const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IRayMarching::AddLight - Add new light
	* @param[in] Color - Color for the new light
	* @param[in] Position - Position for the new light
	* @return Light at given index
	*/
	virtual ILibRayMarchingLight * AddLight (const sLibRayMarchingVector Color, const sLibRayMarchingVector Position) = 0;

	/**
	* IRayMarching::DeleteLight - Delete light at given index
	* @param[in] nIndex - Index
	*/
	virtual void DeleteLight (const LibRayMarching_uint32 nIndex) = 0;

	/**
	* IRayMarching::GetScene - Returns the current scene
	* @return Current scene
	*/
	virtual ILibRayMarchingScene * GetScene () = 0;

	/**
	* IRayMarching::GetCamera - Returns the current camera
	* @return Current camera
	*/
	virtual ILibRayMarchingCamera * GetCamera () = 0;

	/**
	* IRayMarching::RenderScene - Renders the current scene
	*/
	virtual void RenderScene () = 0;

	/**
	* IRayMarching::RenderPixel - Renders one single pixel
	* @param[in] dX - X position of the pixel
	* @param[in] dY - Y position of the pixel
	* @return RGBA value of the pixel
	*/
	virtual LibRayMarching_uint32 RenderPixel (const LibRayMarching_double dX, const LibRayMarching_double dY) = 0;

	/**
	* IRayMarching::SetProgressCallback - Sets the progress callback function
	* @param[in] pProgressCallback - callback function
	*/
	virtual void SetProgressCallback (const LibRayMarchingProgressCallback pProgressCallback) = 0;

};


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CLibRayMarchingWrapper {
public:
	/**
	* Ilibraymarching::ReleaseInstance - Releases the memory of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance (ILibRayMarchingBaseClass* pInstance);

	/**
	* Ilibraymarching::GetLibraryVersion - retrieves the current version of the library.
	* @param[out] nMajor - returns the major version of the library
	* @param[out] nMinor - returns the minor version of the library
	* @param[out] nMicro - returns the micro version of the library
	*/
	static void GetLibraryVersion (LibRayMarching_uint32 & nMajor, LibRayMarching_uint32 & nMinor, LibRayMarching_uint32 & nMicro);

	/**
	* Ilibraymarching::CreateRayMarching - Creates a new ray marching instance
	* @return New raymarching instance
	*/
	static ILibRayMarchingRayMarching * CreateRayMarching ();

	/**
	* Ilibraymarching::SetJournal - Handles Library Journaling
	* @param[in] sFileName - Journal FileName
	*/
	static void SetJournal (const std::string & sFileName);

};

} // namespace Impl
} // namespace LibRayMarching

#endif // __LIBRAYMARCHING_CPPINTERFACES

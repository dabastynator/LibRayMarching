/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.4.0.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of Ray Marching Library

Interface version: 0.9.0

*/

#ifndef __LIBRAYMARCHING_HEADER
#define __LIBRAYMARCHING_HEADER

#ifdef __LIBRAYMARCHING_EXPORTS
#ifdef WIN32
#define LIBRAYMARCHING_DECLSPEC __declspec (dllexport)
#else // WIN32
#define LIBRAYMARCHING_DECLSPEC __attribute__((visibility("default")))
#endif // WIN32
#else // __LIBRAYMARCHING_EXPORTS
#define LIBRAYMARCHING_DECLSPEC
#endif // __LIBRAYMARCHING_EXPORTS

#include "libraymarching_types.h"

extern "C" {

/*************************************************************************************************************************
 Class definition for Material
**************************************************************************************************************************/

/**
* Returns the current color
*
* @param[in] pMaterial - Material instance.
* @param[out] pColor - The current color of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getcolor(LibRayMarching_Material pMaterial, sLibRayMarchingVector * pColor);

/**
* Set the current color
*
* @param[in] pMaterial - Material instance.
* @param[in] pColor - The color of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setcolor(LibRayMarching_Material pMaterial, const sLibRayMarchingVector * pColor);

/**
* Get the ambient factor
*
* @param[in] pMaterial - Material instance.
* @param[out] pAmbient - The ambient factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getambient(LibRayMarching_Material pMaterial, LibRayMarching_double * pAmbient);

/**
* Set the ambient factor
*
* @param[in] pMaterial - Material instance.
* @param[in] dAmbient - The ambient factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setambient(LibRayMarching_Material pMaterial, LibRayMarching_double dAmbient);

/**
* Get the diffuse factor
*
* @param[in] pMaterial - Material instance.
* @param[out] pDiffuse - The diffuse factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getdiffuse(LibRayMarching_Material pMaterial, LibRayMarching_double * pDiffuse);

/**
* Set the diffuse factor
*
* @param[in] pMaterial - Material instance.
* @param[in] dDiffuse - The diffuse factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setdiffuse(LibRayMarching_Material pMaterial, LibRayMarching_double dDiffuse);

/**
* Get the specular factor
*
* @param[in] pMaterial - Material instance.
* @param[out] pSpecular - The specular factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getspecular(LibRayMarching_Material pMaterial, LibRayMarching_double * pSpecular);

/**
* Set the specular factor
*
* @param[in] pMaterial - Material instance.
* @param[in] dSpecular - The specular factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setspecular(LibRayMarching_Material pMaterial, LibRayMarching_double dSpecular);

/**
* Get the specular alpha factor
*
* @param[in] pMaterial - Material instance.
* @param[out] pSpecularAlpha - The specular alpha factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getspecularalpha(LibRayMarching_Material pMaterial, LibRayMarching_double * pSpecularAlpha);

/**
* Set the specular alpha factor
*
* @param[in] pMaterial - Material instance.
* @param[in] dSpecularAlpha - The specular alpha factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setspecularalpha(LibRayMarching_Material pMaterial, LibRayMarching_double dSpecularAlpha);

/**
* Get the reflection factor
*
* @param[in] pMaterial - Material instance.
* @param[out] pReflection - The reflection factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_getreflection(LibRayMarching_Material pMaterial, LibRayMarching_double * pReflection);

/**
* Set the specular alpha factor
*
* @param[in] pMaterial - Material instance.
* @param[in] dReflection - The reflection factor of this Material
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_material_setreflection(LibRayMarching_Material pMaterial, LibRayMarching_double dReflection);

/*************************************************************************************************************************
 Class definition for Matrix
**************************************************************************************************************************/

/**
* Reset this matrix to identity
*
* @param[in] pMatrix - Matrix instance.
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_matrix_identity(LibRayMarching_Matrix pMatrix);

/**
* Translate this matrix by given movement vector
*
* @param[in] pMatrix - Matrix instance.
* @param[in] pTranslation - Movement vector
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_matrix_translate(LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pTranslation);

/**
* Rotate this matrix by given axis and angle
*
* @param[in] pMatrix - Matrix instance.
* @param[in] pAxis - Rotation axis
* @param[in] dRadian - Rotation angle in radian
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_matrix_rotate(LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pAxis, LibRayMarching_double dRadian);

/**
* Scale this matrix by given vector
*
* @param[in] pMatrix - Matrix instance.
* @param[in] pScale - Scale vector for each component
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_matrix_scale(LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pScale);

/*************************************************************************************************************************
 Class definition for Primitive
**************************************************************************************************************************/

/**
* Returns the matrix of this primitive
*
* @param[in] pPrimitive - Primitive instance.
* @param[out] pMatrix - Matrix of this primitive
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_getmatrix(LibRayMarching_Primitive pPrimitive, LibRayMarching_Matrix * pMatrix);

/**
* Returns the material of this primitive
*
* @param[in] pPrimitive - Primitive instance.
* @param[out] pMaterial - Material of this primitive
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_primitive_getmaterial(LibRayMarching_Primitive pPrimitive, LibRayMarching_Material * pMaterial);

/*************************************************************************************************************************
 Class definition for Sphere
**************************************************************************************************************************/

/**
* Get the current radius
*
* @param[in] pSphere - Sphere instance.
* @param[out] pRadius - The radius
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_sphere_getradius(LibRayMarching_Sphere pSphere, LibRayMarching_double * pRadius);

/**
* Set the current radius
*
* @param[in] pSphere - Sphere instance.
* @param[in] dRadius - The raidus
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_sphere_setradius(LibRayMarching_Sphere pSphere, LibRayMarching_double dRadius);

/*************************************************************************************************************************
 Class definition for Capsule
**************************************************************************************************************************/

/**
* Get the current radius
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pRadius - The radius
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getradius(LibRayMarching_Capsule pCapsule, LibRayMarching_double * pRadius);

/**
* Set the current radius
*
* @param[in] pCapsule - Capsule instance.
* @param[in] dRadius - The raidus
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setradius(LibRayMarching_Capsule pCapsule, LibRayMarching_double dRadius);

/**
* Get the current point 1
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pPoint1 - Point 1
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getpoint1(LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint1);

/**
* Set the current point 1
*
* @param[in] pCapsule - Capsule instance.
* @param[in] pPoint1 - Point 1
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setpoint1(LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint1);

/**
* Get the current point 2
*
* @param[in] pCapsule - Capsule instance.
* @param[out] pPoint2 - Point 2
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_getpoint2(LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint2);

/**
* Set the current point 2
*
* @param[in] pCapsule - Capsule instance.
* @param[in] pPoint2 - Point 2
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_capsule_setpoint2(LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint2);

/*************************************************************************************************************************
 Class definition for Plane
**************************************************************************************************************************/

/**
* Get the current origin
*
* @param[in] pPlane - Plane instance.
* @param[out] pOrigin - Origin
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_getorigin(LibRayMarching_Plane pPlane, sLibRayMarchingVector * pOrigin);

/**
* Set the current origin
*
* @param[in] pPlane - Plane instance.
* @param[in] pOrigin - Origin
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_setorigin(LibRayMarching_Plane pPlane, const sLibRayMarchingVector * pOrigin);

/**
* Get the current normal
*
* @param[in] pPlane - Plane instance.
* @param[out] pNormal - Normal
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_getnormal(LibRayMarching_Plane pPlane, sLibRayMarchingVector * pNormal);

/**
* Set the current normal
*
* @param[in] pPlane - Plane instance.
* @param[in] pNormal - Normal
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_plane_setnormal(LibRayMarching_Plane pPlane, const sLibRayMarchingVector * pNormal);

/*************************************************************************************************************************
 Class definition for Box
**************************************************************************************************************************/

/**
* Get the size in x, y and z dimension
*
* @param[in] pBox - Box instance.
* @param[out] pDimensions - Size in x, y and z dimension
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_box_getdimensions(LibRayMarching_Box pBox, sLibRayMarchingVector * pDimensions);

/**
* Set the size in x, y and z dimension
*
* @param[in] pBox - Box instance.
* @param[in] pDimensions - Size in x, y and z dimension
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_box_setdimensions(LibRayMarching_Box pBox, const sLibRayMarchingVector * pDimensions);

/*************************************************************************************************************************
 Class definition for Light
**************************************************************************************************************************/

/**
* Returns the current color of this light
*
* @param[in] pLight - Light instance.
* @param[out] pColor - The current color
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_light_getcolor(LibRayMarching_Light pLight, sLibRayMarchingVector * pColor);

/**
* Set the current color of this light
*
* @param[in] pLight - Light instance.
* @param[in] pColor - The color
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_light_setcolor(LibRayMarching_Light pLight, const sLibRayMarchingVector * pColor);

/**
* Returns the current color of this light
*
* @param[in] pLight - Light instance.
* @param[out] pPosition - The current position
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_light_getposition(LibRayMarching_Light pLight, sLibRayMarchingVector * pPosition);

/**
* Set the current color this light
*
* @param[in] pLight - Light instance.
* @param[in] pPosition - The position
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_light_setposition(LibRayMarching_Light pLight, const sLibRayMarchingVector * pPosition);

/*************************************************************************************************************************
 Class definition for Scene
**************************************************************************************************************************/

/**
* Get number of primitives
*
* @param[in] pScene - Scene instance.
* @param[out] pCount - Number of primitives
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_getprimitivecount(LibRayMarching_Scene pScene, LibRayMarching_uint32 * pCount);

/**
* Get primitive at given index
*
* @param[in] pScene - Scene instance.
* @param[in] nIndex - Index
* @param[out] pLight - Primitive at given index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_getprimitive(LibRayMarching_Scene pScene, LibRayMarching_uint32 nIndex, LibRayMarching_Primitive * pLight);

/**
* Delete primitive at given index
*
* @param[in] pScene - Scene instance.
* @param[in] nIndex - Index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_deleteprimitive(LibRayMarching_Scene pScene, LibRayMarching_uint32 nIndex);

/**
* Create new sphere
*
* @param[in] pScene - Scene instance.
* @param[in] dRadius - Radius of the sphere
* @param[out] pSphere - New sphere
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_addsphere(LibRayMarching_Scene pScene, LibRayMarching_double dRadius, LibRayMarching_Sphere * pSphere);

/**
* Create new capsule
*
* @param[in] pScene - Scene instance.
* @param[in] dRadius - Radius of the capsule
* @param[in] pPoint1 - Point 1
* @param[in] pPoint2 - Point 2
* @param[out] pCapsule - New capsule
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_addcapsule(LibRayMarching_Scene pScene, LibRayMarching_double dRadius, const sLibRayMarchingVector * pPoint1, const sLibRayMarchingVector * pPoint2, LibRayMarching_Capsule * pCapsule);

/**
* Create new sphere
*
* @param[in] pScene - Scene instance.
* @param[in] pDimensions - Dimensions of the box
* @param[out] pBox - New box
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_addbox(LibRayMarching_Scene pScene, const sLibRayMarchingVector * pDimensions, LibRayMarching_Box * pBox);

/**
* Create new plane
*
* @param[in] pScene - Scene instance.
* @param[in] pOrigin - Origin of the plane
* @param[in] pNormal - Normal of the plane
* @param[out] pPlane - New plane
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_scene_addplane(LibRayMarching_Scene pScene, const sLibRayMarchingVector * pOrigin, const sLibRayMarchingVector * pNormal, LibRayMarching_Plane * pPlane);

/*************************************************************************************************************************
 Class definition for Camera
**************************************************************************************************************************/

/**
* Set the screen size
*
* @param[in] pCamera - Camera instance.
* @param[in] nWidth - Width of the screen
* @param[in] nHeight - Height of the screen
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_camera_setscreensize(LibRayMarching_Camera pCamera, LibRayMarching_uint32 nWidth, LibRayMarching_uint32 nHeight);

/**
* Set viewport by given view vectors and FOV
*
* @param[in] pCamera - Camera instance.
* @param[in] pEye - Position of the eye
* @param[in] pDir - Direction of the view
* @param[in] pUp - Direction of up vector
* @param[in] dFOV - Field of view angle in radian
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_camera_setviewport(LibRayMarching_Camera pCamera, const sLibRayMarchingVector * pEye, const sLibRayMarchingVector * pDir, const sLibRayMarchingVector * pUp, LibRayMarching_double dFOV);

/*************************************************************************************************************************
 Class definition for RayMarching
**************************************************************************************************************************/

/**
* Get number of lights
*
* @param[in] pRayMarching - RayMarching instance.
* @param[out] pCount - Number of lights
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getlightcount(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 * pCount);

/**
* Get light at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @param[out] pLight - Light at given index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getlight(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex, LibRayMarching_Light * pLight);

/**
* Add new light
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pColor - Color for the new light
* @param[in] pPosition - Position for the new light
* @param[out] pLight - Light at given index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_addlight(LibRayMarching_RayMarching pRayMarching, const sLibRayMarchingVector * pColor, const sLibRayMarchingVector * pPosition, LibRayMarching_Light * pLight);

/**
* Delete light at given index
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] nIndex - Index
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_deletelight(LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex);

/**
* Returns the current scene
*
* @param[in] pRayMarching - RayMarching instance.
* @param[out] pScene - Current scene
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getscene(LibRayMarching_RayMarching pRayMarching, LibRayMarching_Scene * pScene);

/**
* Returns the current camera
*
* @param[in] pRayMarching - RayMarching instance.
* @param[out] pCamera - Current camera
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_getcamera(LibRayMarching_RayMarching pRayMarching, LibRayMarching_Camera * pCamera);

/**
* Renders the current scene
*
* @param[in] pRayMarching - RayMarching instance.
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_renderscene(LibRayMarching_RayMarching pRayMarching);

/**
* Renders one single pixel
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] dX - X position of the pixel
* @param[in] dY - Y position of the pixel
* @param[out] pColor - RGBA value of the pixel
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_renderpixel(LibRayMarching_RayMarching pRayMarching, LibRayMarching_double dX, LibRayMarching_double dY, LibRayMarching_uint32 * pColor);

/**
* Sets the progress callback function
*
* @param[in] pRayMarching - RayMarching instance.
* @param[in] pProgressCallback - The progress callback
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_raymarching_setprogresscallback(LibRayMarching_RayMarching pRayMarching, LibRayMarchingProgressCallback pProgressCallback);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* Releases the memory of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_releaseinstance(LibRayMarching_BaseClass pInstance);

/**
* retrieves the current version of the library.
*
* @param[out] pMajor - returns the major version of the library
* @param[out] pMinor - returns the minor version of the library
* @param[out] pMicro - returns the micro version of the library
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_getlibraryversion(LibRayMarching_uint32 * pMajor, LibRayMarching_uint32 * pMinor, LibRayMarching_uint32 * pMicro);

/**
* Creates a new ray marching instance
*
* @param[out] pInstance - New raymarching instance
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_createraymarching(LibRayMarching_RayMarching * pInstance);

/**
* Handles Library Journaling
*
* @param[in] pFileName - Journal FileName
* @return error code or 0 (success)
*/
LIBRAYMARCHING_DECLSPEC LibRayMarchingResult libraymarching_setjournal(const char * pFileName);

}

#endif // __LIBRAYMARCHING_HEADER


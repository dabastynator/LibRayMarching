/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.4.0.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Ray Marching Library. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 0.9.0

*/

#include "libraymarching.h"
#include "libraymarching_interfaces.hpp"
#include "libraymarching_interfaceexception.hpp"
#include "libraymarching_interfacejournal.hpp"

using namespace LibRayMarching::Impl;

PLibRayMarchingInterfaceJournal m_GlobalJournal;

extern "C" {


/*************************************************************************************************************************
 Class implementation for Material
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_material_getcolor (LibRayMarching_Material pMaterial, sLibRayMarchingVector * pColor)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetColor");
		}

		if (pColor == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pColor = pIMaterial->GetColor();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setcolor (LibRayMarching_Material pMaterial, const sLibRayMarchingVector * pColor)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetColor");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetColor(*pColor);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_getambient (LibRayMarching_Material pMaterial, LibRayMarching_double * pAmbient)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetAmbient");
		}

		if (pAmbient == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pAmbient = pIMaterial->GetAmbient();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Ambient", *pAmbient);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setambient (LibRayMarching_Material pMaterial, LibRayMarching_double dAmbient)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetAmbient");
			pJournalEntry->addDoubleParameter ("Ambient", dAmbient);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetAmbient(dAmbient);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_getdiffuse (LibRayMarching_Material pMaterial, LibRayMarching_double * pDiffuse)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetDiffuse");
		}

		if (pDiffuse == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pDiffuse = pIMaterial->GetDiffuse();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Diffuse", *pDiffuse);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setdiffuse (LibRayMarching_Material pMaterial, LibRayMarching_double dDiffuse)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetDiffuse");
			pJournalEntry->addDoubleParameter ("Diffuse", dDiffuse);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetDiffuse(dDiffuse);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_getspecular (LibRayMarching_Material pMaterial, LibRayMarching_double * pSpecular)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetSpecular");
		}

		if (pSpecular == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pSpecular = pIMaterial->GetSpecular();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Specular", *pSpecular);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setspecular (LibRayMarching_Material pMaterial, LibRayMarching_double dSpecular)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetSpecular");
			pJournalEntry->addDoubleParameter ("Specular", dSpecular);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetSpecular(dSpecular);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_getspecularalpha (LibRayMarching_Material pMaterial, LibRayMarching_double * pSpecularAlpha)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetSpecularAlpha");
		}

		if (pSpecularAlpha == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pSpecularAlpha = pIMaterial->GetSpecularAlpha();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("SpecularAlpha", *pSpecularAlpha);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setspecularalpha (LibRayMarching_Material pMaterial, LibRayMarching_double dSpecularAlpha)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetSpecularAlpha");
			pJournalEntry->addDoubleParameter ("SpecularAlpha", dSpecularAlpha);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetSpecularAlpha(dSpecularAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_getreflection (LibRayMarching_Material pMaterial, LibRayMarching_double * pReflection)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "GetReflection");
		}

		if (pReflection == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pReflection = pIMaterial->GetReflection();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Reflection", *pReflection);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_material_setreflection (LibRayMarching_Material pMaterial, LibRayMarching_double dReflection)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMaterial, "Material", "SetReflection");
			pJournalEntry->addDoubleParameter ("Reflection", dReflection);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMaterial;
		ILibRayMarchingMaterial* pIMaterial = dynamic_cast<ILibRayMarchingMaterial*>(pIBaseClass);
		if (!pIMaterial)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMaterial->SetReflection(dReflection);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Matrix
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_matrix_identity (LibRayMarching_Matrix pMatrix)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMatrix, "Matrix", "Identity");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMatrix;
		ILibRayMarchingMatrix* pIMatrix = dynamic_cast<ILibRayMarchingMatrix*>(pIBaseClass);
		if (!pIMatrix)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMatrix->Identity();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_matrix_translate (LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pTranslation)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMatrix, "Matrix", "Translate");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMatrix;
		ILibRayMarchingMatrix* pIMatrix = dynamic_cast<ILibRayMarchingMatrix*>(pIBaseClass);
		if (!pIMatrix)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMatrix->Translate(*pTranslation);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_matrix_rotate (LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pAxis, LibRayMarching_double dRadian)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMatrix, "Matrix", "Rotate");
			pJournalEntry->addDoubleParameter ("Radian", dRadian);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMatrix;
		ILibRayMarchingMatrix* pIMatrix = dynamic_cast<ILibRayMarchingMatrix*>(pIBaseClass);
		if (!pIMatrix)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMatrix->Rotate(*pAxis, dRadian);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_matrix_scale (LibRayMarching_Matrix pMatrix, const sLibRayMarchingVector * pScale)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMatrix, "Matrix", "Scale");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pMatrix;
		ILibRayMarchingMatrix* pIMatrix = dynamic_cast<ILibRayMarchingMatrix*>(pIBaseClass);
		if (!pIMatrix)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIMatrix->Scale(*pScale);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Primitive
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_primitive_getmatrix (LibRayMarching_Primitive pPrimitive, LibRayMarching_Matrix * pMatrix)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPrimitive, "Primitive", "GetMatrix");
		}

		if (pMatrix == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPrimitive;
		ILibRayMarchingPrimitive* pIPrimitive = dynamic_cast<ILibRayMarchingPrimitive*>(pIBaseClass);
		if (!pIPrimitive)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseMatrix(nullptr);

		pBaseMatrix = pIPrimitive->GetMatrix();

		*pMatrix = (ILibRayMarchingBaseClass*)(pBaseMatrix);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Matrix", *pMatrix);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_primitive_getmaterial (LibRayMarching_Primitive pPrimitive, LibRayMarching_Material * pMaterial)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPrimitive, "Primitive", "GetMaterial");
		}

		if (pMaterial == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPrimitive;
		ILibRayMarchingPrimitive* pIPrimitive = dynamic_cast<ILibRayMarchingPrimitive*>(pIBaseClass);
		if (!pIPrimitive)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseMaterial(nullptr);

		pBaseMaterial = pIPrimitive->GetMaterial();

		*pMaterial = (ILibRayMarchingBaseClass*)(pBaseMaterial);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Material", *pMaterial);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Sphere
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_sphere_getradius (LibRayMarching_Sphere pSphere, LibRayMarching_double * pRadius)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pSphere, "Sphere", "GetRadius");
		}

		if (pRadius == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pSphere;
		ILibRayMarchingSphere* pISphere = dynamic_cast<ILibRayMarchingSphere*>(pIBaseClass);
		if (!pISphere)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pRadius = pISphere->GetRadius();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Radius", *pRadius);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_sphere_setradius (LibRayMarching_Sphere pSphere, LibRayMarching_double dRadius)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pSphere, "Sphere", "SetRadius");
			pJournalEntry->addDoubleParameter ("Radius", dRadius);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pSphere;
		ILibRayMarchingSphere* pISphere = dynamic_cast<ILibRayMarchingSphere*>(pIBaseClass);
		if (!pISphere)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pISphere->SetRadius(dRadius);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Capsule
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_capsule_getradius (LibRayMarching_Capsule pCapsule, LibRayMarching_double * pRadius)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "GetRadius");
		}

		if (pRadius == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pRadius = pICapsule->GetRadius();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Radius", *pRadius);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_capsule_setradius (LibRayMarching_Capsule pCapsule, LibRayMarching_double dRadius)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "SetRadius");
			pJournalEntry->addDoubleParameter ("Radius", dRadius);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pICapsule->SetRadius(dRadius);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_capsule_getpoint1 (LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint1)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "GetPoint1");
		}

		if (pPoint1 == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pPoint1 = pICapsule->GetPoint1();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_capsule_setpoint1 (LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint1)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "SetPoint1");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pICapsule->SetPoint1(*pPoint1);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_capsule_getpoint2 (LibRayMarching_Capsule pCapsule, sLibRayMarchingVector * pPoint2)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "GetPoint2");
		}

		if (pPoint2 == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pPoint2 = pICapsule->GetPoint2();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_capsule_setpoint2 (LibRayMarching_Capsule pCapsule, const sLibRayMarchingVector * pPoint2)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCapsule, "Capsule", "SetPoint2");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCapsule;
		ILibRayMarchingCapsule* pICapsule = dynamic_cast<ILibRayMarchingCapsule*>(pIBaseClass);
		if (!pICapsule)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pICapsule->SetPoint2(*pPoint2);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Plane
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_plane_getorigin (LibRayMarching_Plane pPlane, sLibRayMarchingVector * pOrigin)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPlane, "Plane", "GetOrigin");
		}

		if (pOrigin == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPlane;
		ILibRayMarchingPlane* pIPlane = dynamic_cast<ILibRayMarchingPlane*>(pIBaseClass);
		if (!pIPlane)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pOrigin = pIPlane->GetOrigin();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_plane_setorigin (LibRayMarching_Plane pPlane, const sLibRayMarchingVector * pOrigin)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPlane, "Plane", "SetOrigin");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPlane;
		ILibRayMarchingPlane* pIPlane = dynamic_cast<ILibRayMarchingPlane*>(pIBaseClass);
		if (!pIPlane)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIPlane->SetOrigin(*pOrigin);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_plane_getnormal (LibRayMarching_Plane pPlane, sLibRayMarchingVector * pNormal)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPlane, "Plane", "GetNormal");
		}

		if (pNormal == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPlane;
		ILibRayMarchingPlane* pIPlane = dynamic_cast<ILibRayMarchingPlane*>(pIBaseClass);
		if (!pIPlane)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pNormal = pIPlane->GetNormal();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_plane_setnormal (LibRayMarching_Plane pPlane, const sLibRayMarchingVector * pNormal)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPlane, "Plane", "SetNormal");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pPlane;
		ILibRayMarchingPlane* pIPlane = dynamic_cast<ILibRayMarchingPlane*>(pIBaseClass);
		if (!pIPlane)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIPlane->SetNormal(*pNormal);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Box
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_box_getdimensions (LibRayMarching_Box pBox, sLibRayMarchingVector * pDimensions)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBox, "Box", "GetDimensions");
		}

		if (pDimensions == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pBox;
		ILibRayMarchingBox* pIBox = dynamic_cast<ILibRayMarchingBox*>(pIBaseClass);
		if (!pIBox)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pDimensions = pIBox->GetDimensions();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_box_setdimensions (LibRayMarching_Box pBox, const sLibRayMarchingVector * pDimensions)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBox, "Box", "SetDimensions");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pBox;
		ILibRayMarchingBox* pIBox = dynamic_cast<ILibRayMarchingBox*>(pIBaseClass);
		if (!pIBox)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIBox->SetDimensions(*pDimensions);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Light
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_light_getcolor (LibRayMarching_Light pLight, sLibRayMarchingVector * pColor)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pLight, "Light", "GetColor");
		}

		if (pColor == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pLight;
		ILibRayMarchingLight* pILight = dynamic_cast<ILibRayMarchingLight*>(pIBaseClass);
		if (!pILight)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pColor = pILight->GetColor();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_light_setcolor (LibRayMarching_Light pLight, const sLibRayMarchingVector * pColor)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pLight, "Light", "SetColor");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pLight;
		ILibRayMarchingLight* pILight = dynamic_cast<ILibRayMarchingLight*>(pIBaseClass);
		if (!pILight)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pILight->SetColor(*pColor);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_light_getposition (LibRayMarching_Light pLight, sLibRayMarchingVector * pPosition)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pLight, "Light", "GetPosition");
		}

		if (pPosition == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pLight;
		ILibRayMarchingLight* pILight = dynamic_cast<ILibRayMarchingLight*>(pIBaseClass);
		if (!pILight)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pPosition = pILight->GetPosition();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_light_setposition (LibRayMarching_Light pLight, const sLibRayMarchingVector * pPosition)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pLight, "Light", "SetPosition");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pLight;
		ILibRayMarchingLight* pILight = dynamic_cast<ILibRayMarchingLight*>(pIBaseClass);
		if (!pILight)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pILight->SetPosition(*pPosition);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Scene
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_scene_getprimitivecount (LibRayMarching_Scene pScene, LibRayMarching_uint32 * pCount)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "GetPrimitiveCount");
		}

		if (pCount == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pCount = pIScene->GetPrimitiveCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_getprimitive (LibRayMarching_Scene pScene, LibRayMarching_uint32 nIndex, LibRayMarching_Primitive * pLight)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "GetPrimitive");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pLight == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseLight(nullptr);

		pBaseLight = pIScene->GetPrimitive(nIndex);

		*pLight = (ILibRayMarchingBaseClass*)(pBaseLight);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Light", *pLight);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_deleteprimitive (LibRayMarching_Scene pScene, LibRayMarching_uint32 nIndex)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "DeletePrimitive");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIScene->DeletePrimitive(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_addsphere (LibRayMarching_Scene pScene, LibRayMarching_double dRadius, LibRayMarching_Sphere * pSphere)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "AddSphere");
			pJournalEntry->addDoubleParameter ("Radius", dRadius);
		}

		if (pSphere == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseSphere(nullptr);

		pBaseSphere = pIScene->AddSphere(dRadius);

		*pSphere = (ILibRayMarchingBaseClass*)(pBaseSphere);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Sphere", *pSphere);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_addcapsule (LibRayMarching_Scene pScene, LibRayMarching_double dRadius, const sLibRayMarchingVector * pPoint1, const sLibRayMarchingVector * pPoint2, LibRayMarching_Capsule * pCapsule)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "AddCapsule");
			pJournalEntry->addDoubleParameter ("Radius", dRadius);
		}

		if (pCapsule == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseCapsule(nullptr);

		pBaseCapsule = pIScene->AddCapsule(dRadius, *pPoint1, *pPoint2);

		*pCapsule = (ILibRayMarchingBaseClass*)(pBaseCapsule);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Capsule", *pCapsule);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_addbox (LibRayMarching_Scene pScene, const sLibRayMarchingVector * pDimensions, LibRayMarching_Box * pBox)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "AddBox");
		}

		if (pBox == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseBox(nullptr);

		pBaseBox = pIScene->AddBox(*pDimensions);

		*pBox = (ILibRayMarchingBaseClass*)(pBaseBox);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Box", *pBox);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_scene_addplane (LibRayMarching_Scene pScene, const sLibRayMarchingVector * pOrigin, const sLibRayMarchingVector * pNormal, LibRayMarching_Plane * pPlane)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pScene, "Scene", "AddPlane");
		}

		if (pPlane == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pScene;
		ILibRayMarchingScene* pIScene = dynamic_cast<ILibRayMarchingScene*>(pIBaseClass);
		if (!pIScene)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBasePlane(nullptr);

		pBasePlane = pIScene->AddPlane(*pOrigin, *pNormal);

		*pPlane = (ILibRayMarchingBaseClass*)(pBasePlane);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Plane", *pPlane);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Camera
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_camera_setscreensize (LibRayMarching_Camera pCamera, LibRayMarching_uint32 nWidth, LibRayMarching_uint32 nHeight)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCamera, "Camera", "SetScreenSize");
			pJournalEntry->addUInt32Parameter ("Width", nWidth);
			pJournalEntry->addUInt32Parameter ("Height", nHeight);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCamera;
		ILibRayMarchingCamera* pICamera = dynamic_cast<ILibRayMarchingCamera*>(pIBaseClass);
		if (!pICamera)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pICamera->SetScreenSize(nWidth, nHeight);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_camera_setviewport (LibRayMarching_Camera pCamera, const sLibRayMarchingVector * pEye, const sLibRayMarchingVector * pDir, const sLibRayMarchingVector * pUp, LibRayMarching_double dFOV)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pCamera, "Camera", "SetViewport");
			pJournalEntry->addDoubleParameter ("FOV", dFOV);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pCamera;
		ILibRayMarchingCamera* pICamera = dynamic_cast<ILibRayMarchingCamera*>(pIBaseClass);
		if (!pICamera)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pICamera->SetViewport(*pEye, *pDir, *pUp, dFOV);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for RayMarching
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_raymarching_getlightcount (LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 * pCount)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "GetLightCount");
		}

		if (pCount == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pCount = pIRayMarching->GetLightCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_getlight (LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex, LibRayMarching_Light * pLight)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "GetLight");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pLight == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseLight(nullptr);

		pBaseLight = pIRayMarching->GetLight(nIndex);

		*pLight = (ILibRayMarchingBaseClass*)(pBaseLight);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Light", *pLight);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_addlight (LibRayMarching_RayMarching pRayMarching, const sLibRayMarchingVector * pColor, const sLibRayMarchingVector * pPosition, LibRayMarching_Light * pLight)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "AddLight");
		}

		if (pLight == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseLight(nullptr);

		pBaseLight = pIRayMarching->AddLight(*pColor, *pPosition);

		*pLight = (ILibRayMarchingBaseClass*)(pBaseLight);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Light", *pLight);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_deletelight (LibRayMarching_RayMarching pRayMarching, LibRayMarching_uint32 nIndex)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "DeleteLight");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIRayMarching->DeleteLight(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_getscene (LibRayMarching_RayMarching pRayMarching, LibRayMarching_Scene * pScene)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "GetScene");
		}

		if (pScene == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseScene(nullptr);

		pBaseScene = pIRayMarching->GetScene();

		*pScene = (ILibRayMarchingBaseClass*)(pBaseScene);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Scene", *pScene);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_getcamera (LibRayMarching_RayMarching pRayMarching, LibRayMarching_Camera * pCamera)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "GetCamera");
		}

		if (pCamera == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);

		ILibRayMarchingBaseClass* pBaseCamera(nullptr);

		pBaseCamera = pIRayMarching->GetCamera();

		*pCamera = (ILibRayMarchingBaseClass*)(pBaseCamera);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Camera", *pCamera);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_renderscene (LibRayMarching_RayMarching pRayMarching)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "RenderScene");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIRayMarching->RenderScene();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_renderpixel (LibRayMarching_RayMarching pRayMarching, LibRayMarching_double dX, LibRayMarching_double dY, LibRayMarching_uint32 * pColor)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "RenderPixel");
			pJournalEntry->addDoubleParameter ("X", dX);
			pJournalEntry->addDoubleParameter ("Y", dY);
		}

		if (pColor == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		*pColor = pIRayMarching->RenderPixel(dX, dY);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Color", *pColor);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_raymarching_setprogresscallback (LibRayMarching_RayMarching pRayMarching, LibRayMarchingProgressCallback pProgressCallback)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pRayMarching, "RayMarching", "SetProgressCallback");
		}


		ILibRayMarchingBaseClass* pIBaseClass = (ILibRayMarchingBaseClass *)pRayMarching;
		ILibRayMarchingRayMarching* pIRayMarching = dynamic_cast<ILibRayMarchingRayMarching*>(pIBaseClass);
		if (!pIRayMarching)
			throw ELibRayMarchingInterfaceException(LIBRAYMARCHING_ERROR_INVALIDCAST);


		pIRayMarching->SetProgressCallback(pProgressCallback);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibRayMarchingResult libraymarching_releaseinstance (LibRayMarching_BaseClass pInstance)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("ReleaseInstance");
			pJournalEntry->addHandleParameter ("Instance", pInstance);
		}


		ILibRayMarchingBaseClass* pIBaseClassInstance = (ILibRayMarchingBaseClass *)pInstance;
		ILibRayMarchingBaseClass* pIInstance = dynamic_cast<ILibRayMarchingBaseClass*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDCAST);


		CLibRayMarchingWrapper::ReleaseInstance(pIInstance);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_getlibraryversion (LibRayMarching_uint32 * pMajor, LibRayMarching_uint32 * pMinor, LibRayMarching_uint32 * pMicro)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetLibraryVersion");
		}

		if (!pMajor)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		LibRayMarching_uint32 nMajor;
		LibRayMarching_uint32 nMinor;
		LibRayMarching_uint32 nMicro;

		CLibRayMarchingWrapper::GetLibraryVersion(nMajor, nMinor, nMicro);

		*pMajor = nMajor;
		*pMinor = nMinor;
		*pMicro = nMicro;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Major", *pMajor);
			pJournalEntry->addUInt32Result ("Minor", *pMinor);
			pJournalEntry->addUInt32Result ("Micro", *pMicro);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_createraymarching (LibRayMarching_RayMarching * pInstance)
{
	PLibRayMarchingInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("CreateRayMarching");
		}

		if (pInstance == nullptr)
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		ILibRayMarchingBaseClass* pBaseInstance(nullptr);

		pBaseInstance = CLibRayMarchingWrapper::CreateRayMarching();

		*pInstance = (ILibRayMarchingBaseClass*)(pBaseInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Instance", *pInstance);
			pJournalEntry->writeSuccess();
		}

		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIBRAYMARCHING_ERROR_GENERICEXCEPTION);
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

LibRayMarchingResult libraymarching_setjournal (const char * pFileName)
{
	try {
		if (pFileName == nullptr) 
			throw ELibRayMarchingInterfaceException (LIBRAYMARCHING_ERROR_INVALIDPARAM);

		std::string sFileName(pFileName);

		m_GlobalJournal = nullptr;
		if (sFileName != "") {
			m_GlobalJournal = std::make_shared<CLibRayMarchingInterfaceJournal> (sFileName);
		}


		return LIBRAYMARCHING_SUCCESS;
	}
	catch (ELibRayMarchingInterfaceException & E) {
		return E.getErrorCode();
	}
	catch (...) {
		return LIBRAYMARCHING_ERROR_GENERICEXCEPTION;
	}
}

}


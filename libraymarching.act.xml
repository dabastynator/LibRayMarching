<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="Ray Marching Library" namespace="LibRayMarching" copyright="PrimeDevelopers" year="2019" basename="libraymarching"
	version="0.9.0">
	<license>
		<line value="All rights reserved." />
	</license>
	
	<bindings>
		<binding language="Cpp" indentation="tabs" />
		<binding language="CppDynamic" indentation="tabs" />
		<binding language="Pascal" indentation="4spaces" />
		<binding language="Python" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		<error name="INDEXOUTOFBOUNDS" code="9" description="a given index is out of bounds" />
	</errors>

	<enum name="GroupAction">
		<option name="Unify" value="0" />
		<option name="Intersect" value="1" />
		<option name="Subtract" value="2" />
	</enum>
	
	<struct name="Vector">
		<member name="x" type="double" />
		<member name="y" type="double" />
		<member name="z" type="double" />
	</struct>

	<struct name="Material">
		<member name="Red" type="double" />
		<member name="Green" type="double" />
		<member name="Blue" type="double" />
		<member name="Ambient" type="double" />
		<member name="Diffuse" type="double" />
		<member name="Specular" type="double" />
		<member name="SpecularAlpha" type="double" />
		<member name="Reflection" type="double" />
		<member name="Transparency" type="double" />
		<member name="Refraction" type="double" />
	</struct>
	
	<functiontype name="ProgressCallback" description="Callback to report calculation progress and query whether it should be aborted">
		<param name="ProgressPercentage" type="single" pass="in" description="How far has the calculation progressed?"/>
		<param name="ShouldAbort" type="bool" pass="out" description="Should the calculation be aborted?"/>
	</functiontype>

	<class name="BaseClass">
	</class>

	<!-- A primitive is a renderable -->
	<class name="Primitive">
		<method name="IdentityPosition" description="Reset the position matrix to identity">
		</method>
		<method name="Translate" description="Translate the primitive matrix by given movement vector">
			<param name="Translation" type="struct" class="Vector" pass="in" description="Movement vector" />
		</method>
		<method name="Rotate" description="Rotate the primitive matrix by given axis and angle">
			<param name="Axis" type="struct" class="Vector" pass="in" description="Rotation axis" />
			<param name="Radian" type="double" pass="in" description="Rotation angle in radian" />
		</method>
		<method name="Scale" description="Scale the primitive matrix by given vector">
			<param name="Scale" type="struct" class="Vector" pass="in" description="Scale vector for each component" />
		</method>
		<method name="SetMaterial" description="Set material for this primitive">
			<param name="Material" type="struct" class="Material" pass="in" description="Material for this primitive" />
		</method>
		<method name="SetSinusDistortion" description="Set distortion by sinus addition of signed distance">
			<param name="DistortionFactor" type="double" pass="in" description="Maximal distortion value" />
			<param name="Interval" type="double" pass="in" description="Size of distortion repeating interval" />
		</method>
	</class>
	
	<!-- Sphere -->
	<class name="Sphere" parent="Primitive">
		<method name="GetRadius" description="Get the current radius">
			<param name="Radius" type="double" pass="return" description="The radius" />
		</method>
		<method name="SetRadius" description="Set the current radius">
			<param name="Radius" type="double" pass="in" description="The raidus" />
		</method>
	</class>

	<!-- Capsule -->
	<class name="Capsule" parent="Primitive">
		<method name="GetRadius" description="Get the current radius">
			<param name="Radius" type="double" pass="return" description="The radius" />
		</method>
		<method name="SetRadius" description="Set the current radius">
			<param name="Radius" type="double" pass="in" description="The raidus" />
		</method>
		<method name="GetPoint1" description="Get the current point 1">
			<param name="Point1" type="struct" class="Vector" pass="return" description="Point 1" />
		</method>
		<method name="SetPoint1" description="Set the current point 1">
			<param name="Point1" type="struct" class="Vector" pass="in" description="Point 1" />
		</method>
		<method name="GetPoint2" description="Get the current point 2">
			<param name="Point2" type="struct" class="Vector" pass="return" description="Point 2" />
		</method>
		<method name="SetPoint2" description="Set the current point 2">
			<param name="Point2" type="struct" class="Vector" pass="in" description="Point 2" />
		</method>
	</class>

	<!-- Plane -->
	<class name="Plane" parent="Primitive">
		<method name="GetNormal" description="Get the current normal">
			<param name="Normal" type="struct" class="Vector" pass="return" description="Normal" />
		</method>
		<method name="SetNormal" description="Set the current normal">
			<param name="Normal" type="struct" class="Vector" pass="in" description="Normal" />
		</method>
	</class>

	<!-- Box -->
	<class name="Box" parent="Primitive">
		<method name="GetDimensions" description="Get the size in x, y and z dimension">
			<param name="Dimensions" type="struct" class="Vector" pass="return" description="Size in x, y and z dimension" />
		</method>
		<method name="SetDimensions" description="Set the size in x, y and z dimension">
			<param name="Dimensions" type="struct" class="Vector" pass="in" description="Size in x, y and z dimension" />
		</method>
	</class>

	<!-- Torus -->
	<class name="Torus" parent="Primitive">
		<method name="GetBigRadius" description="Get the bigger outer radius">
			<param name="BigRadius" type="double" pass="return" description="Bigger outer radius" />
		</method>
		<method name="SetBigRadius" description="Set the bigger outer radius">
			<param name="BigRadius" type="double" pass="in" description="Bigger outer radius" />
		</method>
		<method name="GetSmallRadius" description="Get the smaller outer radius">
			<param name="SmallRadius" type="double" pass="return" description="Smaller outer radius" />
		</method>
		<method name="SetSmallRadius" description="Set the smaller outer radius">
			<param name="SmallRadius" type="double" pass="in" description="Smaller outer radius" />
		</method>
	</class>

	<!-- Cylinder -->
	<class name="Cylinder" parent="Primitive">
		<method name="GetRadius" description="Get the radius">
			<param name="Radius" type="double" pass="return" description="radius" />
		</method>
		<method name="SetRadius" description="Set the radius">
			<param name="Radius" type="double" pass="in" description="radius" />
		</method>
		<method name="GetHeight" description="Get the Height">
			<param name="Height" type="double" pass="return" description="Height" />
		</method>
		<method name="SetHeight" description="Set the Height">
			<param name="Height" type="double" pass="in" description="Height" />
		</method>		
	</class>

	<!-- QuaternionFractal -->
	<class name="QuaternionFractal" parent="Primitive">
		<method name="GetQuaternion" description="Get the current quaternion parameter">
			<param name="R" type="double" pass="out" description="quaternion r part" />
			<param name="I" type="double" pass="out" description="quaternion i part" />
			<param name="J" type="double" pass="out" description="quaternion j part" />
			<param name="K" type="double" pass="out" description="quaternion k part" />
		</method>
		<method name="SetQuaternion" description="Set the current quaternion parameter">
			<param name="R" type="double" pass="in" description="quaternion r part" />
			<param name="I" type="double" pass="in" description="quaternion i part" />
			<param name="J" type="double" pass="in" description="quaternion j part" />
			<param name="K" type="double" pass="in" description="quaternion k part" />
		</method>
		<method name="GetIterations" description="Get the number of maximal iterations">
			<param name="Iterations" type="uint32" pass="return" description="iterations" />
		</method>
		<method name="SetIterations" description="Set the number of maximal iterations">
			<param name="Iterations" type="uint32" pass="in" description="iterations" />
		</method>
	</class>

	<!-- MengerSponge -->
	<class name="MengerSponge" parent="Primitive">
		<method name="GetStepCount" description="Get the number of step count">
			<param name="StepCount" type="uint32" pass="return" description="StepCount" />
		</method>
		<method name="SetStepCount" description="Set the number of step count">
			<param name="StepCount" type="uint32" pass="in" description="StepCount" />
		</method>
	</class>

	<!-- PrimitiveGroup -->
	<class name="PrimitiveGroup" parent="Primitive">
		<method name="GetPrimitiveCount" description="Get number of primitives">
			<param name="Count" type="uint32" pass="return" description="Number of primitives" />
		</method>
		<method name="GetPrimitive" description="Get primitive at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
			<param name="Primitive" type="handle" class="Primitive" pass="return" description="Primitive at given index" />
		</method>
		<method name="AddPrimitive" description="Add primitive for this group">
			<param name="Primitive" type="handle" class="Primitive" pass="in" description="Primitive for this group" />
		</method>
		<method name="RemovePrimitive" description="Remove primitive at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
		</method>
		<method name="SetGroupAction" description="Set method to combine primitives">
			<param name="GroupAction" type="enum" class="GroupAction" pass="in" description="Method to combine primitives" />
		</method>
		<method name="GetGroupAction" description="Get method to combine primitives">
			<param name="GroupAction" type="enum" class="GroupAction" pass="return" description="Method to combine primitives" />
		</method>
	</class>

	<!-- The ray marching holds a scene and renders it to a pixel buffer array -->
	<class name="RayMarching">
		<method name="GetLightCount" description="Get number of lights">
			<param name="Count" type="uint32" pass="return" description="Number of lights" />
		</method>
		<method name="GetLight" description="Get light at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
			<param name="Position" type="struct" class="Vector" pass="out" description="Position of the light" />
			<param name="Color" type="struct" class="Vector" pass="out" description="Color of the light" />
		</method>
		<method name="AddLight" description="Add new light">
			<param name="Position" type="struct" class="Vector" pass="in" description="Position of the light" />
			<param name="Color" type="struct" class="Vector" pass="in" description="Color of the light" />
		</method>
		<method name="DeleteLight" description="Delete light at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
		</method>

		<method name="GetPrimitiveCount" description="Get number of primitives">
			<param name="Count" type="uint32" pass="return" description="Number of primitives" />
		</method>
		<method name="GetPrimitive" description="Get primitive at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
			<param name="Primitive" type="handle" class="Primitive" pass="return" description="Primitive at given index" />
		</method>
		<method name="AddPrimitive" description="Add primitive">
			<param name="Primitive" type="handle" class="Primitive" pass="in" description="Primitive" />
		</method>
		<method name="RemovePrimitive" description="Remove primitive at given index">
			<param name="Index" type="uint32" pass="in" description="Index" />
		</method>

		<method name="SetScreenSize" description="Set the screen size">
			<param name="Width" type="uint32" pass="in" description="Width of the screen" />
			<param name="Height" type="uint32" pass="in" description="Height of the screen" />
		</method>
		<method name="SetViewport" description="Set viewport by given view vectors and FOV">
			<param name="Eye" type="struct" class="Vector" pass="in" description="Position of the eye" />
			<param name="Dir" type="struct" class="Vector" pass="in" description="Direction of the view" />
			<param name="Up" type="struct" class="Vector" pass="in" description="Direction of up vector" />
			<param name="FOV" type="double" pass="in" description="Field of view angle in radian" />
		</method>
		<method name="SetBackground" description="Set special properties">
			<param name="Background" type="struct" class="Vector" pass="in" description="Background color" />
			<param name="DistanceStart" type="double" pass="in" description="Distance where the background shading starts" />
			<param name="DistanceEnd" type="double" pass="in" description="Distance where the background shading ends" />
		</method>
		<method name="SetRenderProperties" description="Set special properties">
			<param name="Oversampling" type="uint32" pass="in" description="Oversampling of one pixel" />
			<param name="MaxBouncing" type="uint32" pass="in" description="Maximal tray bouncing for transparent and reflecting surfaces" />
		</method>

		<method name="RenderScene" description="Renders the current scene">
		</method>

		<method name="GetColorBuffer" description="Return the color buffer">
			<param name="ColorBuffer" type="basicarray" class="uint64" pass="out" description="Field of colors. One integer represents color as RGBA value of the pixel" />
		</method>

		<method name="RenderPixel" description="Renders one single pixel">
			<param name="X" type="double" pass="in" description="X position of the pixel" />
			<param name="Y" type="double" pass="in" description="Y position of the pixel" />
			<param name="Color" type="uint32" pass="return" description="RGBA value of the pixel" />
		</method>

		<method name="SetProgressCallback" description="Sets the progress callback function">
			<param name="ProgressCallback" type="functiontype" class="ProgressCallback" pass="in" description="The progress callback" />
		</method>
	</class>
	
	<global baseclassname="BaseClass" releasemethod="ReleaseInstance" versionmethod="GetLibraryVersion" errormethod="GetLastError">

		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="handle" class="BaseClass" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>

		<method name="ReleaseInstance" description="Releases the memory of an Instance">
			<param name="Instance" type="handle" class="BaseClass" pass="in" description="Instance Handle" />
		</method>

		<method name="GetLibraryVersion" description = "retrieves the current version of the library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of the library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of the library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of the library" />
		</method>
		
		<method name="CreateRayMarching" description="Creates a new ray marching instance">
			<param name="Instance" type="handle" class="RayMarching" pass="return" description="New raymarching instance" />
		</method>

		<method name="CreateSphere" description="Create new sphere">
			<param name="Radius" type="double" pass="in" description="Radius of the sphere" />
			<param name="Sphere" type="handle" class="Sphere" pass="return" description="New sphere" />
		</method>

		<method name="CreateCapsule" description="Create new capsule">
			<param name="Radius" type="double" pass="in" description="Radius of the capsule" />
			<param name="Point1" type="struct" class="Vector" pass="in" description="Point 1" />
			<param name="Point2" type="struct" class="Vector" pass="in" description="Point 2" />
			<param name="Capsule" type="handle" class="Capsule" pass="return" description="New capsule" />
		</method>

		<method name="CreateBox" description="Create new sphere">
			<param name="Dimensions" type="struct" class="Vector" pass="in" description="Dimensions of the box" />
			<param name="Box" type="handle" class="Box" pass="return" description="New box" />
		</method>

		<method name="CreatePlane" description="Create new plane">
			<param name="Origin" type="struct" class="Vector" pass="in" description="Origin of the plane" />
			<param name="Normal" type="struct" class="Vector" pass="in" description="Normal of the plane" />
			<param name="Plane" type="handle" class="Plane" pass="return" description="New plane" />
		</method>

		<method name="CreateCylinder" description="Create new cylinder">
			<param name="Radius" type="double" pass="in" description="Radius of the cylinder" />
			<param name="Height" type="double" pass="in" description="Height of the cylinder" />
			<param name="Cylinder" type="handle" class="Cylinder" pass="return" description="New cylinder" />
		</method>

		<method name="CreateTorus" description="Create new Torus">
			<param name="BigRadius" type="double" pass="in" description="Big Radius of the Torus" />
			<param name="SmallRadius" type="double" pass="in" description="Small Radius of the Torus" />
			<param name="Torus" type="handle" class="Torus" pass="return" description="New Torus" />
		</method>

		<method name="CreateMengerSponge" description="Create new MengerSponge">
			<param name="StepCount" type="uint32" pass="in" description="StepCount" />
			<param name="MengerSponge" type="handle" class="MengerSponge" pass="return" description="New MengerSponge" />
		</method>

		<method name="CreateQuaternionFractal" description="Create new QuaternionFractal">
			<param name="Iterations" type="uint32" pass="in" description="Iterations" />
			<param name="QuaternionFractal" type="handle" class="QuaternionFractal" pass="return" description="New QuaternionFractal" />
		</method>

		<method name="CreatePrimitiveGroup" description="Create new PrimitiveGroup">
			<param name="GroupAction" type="enum" class="GroupAction" pass="in" description="Method to combine primitives" />
			<param name="PrimitiveGroup" type="handle" class="PrimitiveGroup" pass="return" description="New PrimitiveGroup" />
		</method>

	</global>
</component>
